---
title: "Hands-on exercise01"
author: "Yuheng Liang"
format: html
editor: visual
date: "August 16, 2024"
date-modified: "August 20,2024"
execute: 
  eval: true
  echo: true
  freeze: true
---

# Hands-O1

# Hands-On Exercise 1: Geospatial Data Science with R

## 1.0 overview

Geospatial Data Science is a process of importing, wrangling, integrating, and processing geographically referenced data sets. In this hands-on exercise, you will learn how to perform geospatial data science tasks in R by using **sf** package.

## 2.0 setting

### 2.1 Data Acquisition

Data are key to data analytics including geospatial analytics. Hence, before analysing, I extract the necessary data sets from the following sources:

-   Master Plan 2014 Subzone Boundary (Web) from \[ [data.gov.sg](https://data.gov.sg/)\]
-   Pre-Schools Location from \[[data.gov.sg](https://data.gov.sg/)\]
-   Cycling Path from \[[LTADataMall](https://www.mytransport.sg/content/mytransport/home/dataMall.html)\]
-   Latest version of Singapore Airbnb listing data from \[ [Inside Airbnb](http://insideairbnb.com/get-the-data.html)\]

### 2.2 Installing R-Packages

-   **sf** for importing, managing, and processing geospatial data, and
-   **tidyverse** for performing data science tasks such as importing, wrangling and visualising data.

### 2.3 Importing DATA and PACKAGES

install the required packages using the code chunk below

​pacman::p_load(sf, tidyverse)

Import Shapefiles

using `st_read()`to open shapefiles

-   

    ###### when the input geospatial data is in shapefile format, two arguments will be used

-   no extension

### Importing polygon feature data in shapefile format

``` r
 mpsz = st_read(dsn = "data/geospatial/MasterPlan2014SubzoneBoundaryWebSHP", layer = "MP14_SUBZONE_WEB_PL")
```

```         
Reading layer `MP14_SUBZONE_WEB_PL' from data source 
  `D:\IS415-Geospatial-Analytics-and-Applications-Blog\Hands-on_Ex01\data\geospatial\MasterPlan2014SubzoneBoundaryWebSHP' 
  using driver `ESRI Shapefile'
Simple feature collection with 323 features and 15 fields
Geometry type: MULTIPOLYGON
Dimension:     XY
Bounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33
Projected CRS: SVY21
```

### Importing polyline feature data in shapefile form

``` r
cyclingpath = st_read(dsn = "data/geospatial/CyclingPath_Jul2024", layer = "CyclingPathGazette")
```

Result:

```         
Reading layer `CyclingPathGazette' from data source 
`D:\IS415-Geospatial-Analytics-and-Applications-Blog\Hands-on_Ex01\data\geospatial\CyclingPath_Jul2024' 
  using driver `ESRI Shapefile'
Simple feature collection with 3138 features and 2 fields
Geometry type: MULTILINESTRING
Dimension:     XY
Bounding box:  xmin: 11854.32 ymin: 28347.98 xmax: 42644.17 ymax: 48948.15
Projected CRS: SVY21
```

### Importing GIS data in kml format

``` r
preschool = st_read("data/geospatial/PreSchoolsLocation.kml")
```

Result:

```         
Reading layer `PRESCHOOLS_LOCATION' from data source 
  `D:\IS415-Geospatial-Analytics-and-Applications-Blog\Hands-on_Ex01\data\geospatial\PreSchoolsLocation.kml' 
  using driver `KML'
Simple feature collection with 2290 features and 2 fields
Geometry type: POINT
Dimension:     XYZ
Bounding box:  xmin: 103.6878 ymin: 1.247759 xmax: 103.9897 ymax: 1.462134
z_range:       zmin: 0 zmax: 0
Geodetic CRS:  WGS 84
```

## 3.0 Checking the Content of A Simple Feature Data Frame

### 3.1 Working with *st_geometry()*

print only displays basic information of the feature class

``` r
st_geometry(mpsz)
```

Result:

```         
Geometry set for 323 features 
Geometry type: MULTIPOLYGON
Dimension:     XY
Bounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33
Projected CRS: SVY21
First 5 geometries:
MULTIPOLYGON (((31495.56 30140.01, 31980.96 296...
MULTIPOLYGON (((29092.28 30021.89, 29119.64 300...
MULTIPOLYGON (((29932.33 29879.12, 29947.32 298...
MULTIPOLYGON (((27131.28 30059.73, 27088.33 297...
MULTIPOLYGON (((26451.03 30396.46, 26440.47 303...
```

### 3.2 Working with glimpse()

*glimpse()* report more about the associated attribute information in the data frame.

``` r
glimpse(mpsz)
```

Result:

```         
Rows: 323
Columns: 16
$ OBJECTID   <int> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 1…
$ SUBZONE_NO <int> 1, 1, 3, 8, 3, 7, 9, 2, 13, 7, 12, 6, 1, 5, 1, 1, 3, 2, …
$ SUBZONE_N  <chr> "MARINA SOUTH", "PEARL'S HILL", "BOAT QUAY", "HENDERSON …
$ SUBZONE_C  <chr> "MSSZ01", "OTSZ01", "SRSZ03", "BMSZ08", "BMSZ03", "BMSZ0…
$ CA_IND     <chr> "Y", "Y", "Y", "N", "N", "N", "N", "Y", "N", "N", "N", "…
$ PLN_AREA_N <chr> "MARINA SOUTH", "OUTRAM", "SINGAPORE RIVER", "BUKIT MERA…
$ PLN_AREA_C <chr> "MS", "OT", "SR", "BM", "BM", "BM", "BM", "SR", "QT", "Q…
$ REGION_N   <chr> "CENTRAL REGION", "CENTRAL REGION", "CENTRAL REGION", "C…
$ REGION_C   <chr> "CR", "CR", "CR", "CR", "CR", "CR", "CR", "CR", "CR", "C…
$ INC_CRC    <chr> "5ED7EB253F99252E", "8C7149B9EB32EEFC", "C35FEFF02B13E0E…
$ FMEL_UPD_D <date> 2014-12-05, 2014-12-05, 2014-12-05, 2014-12-05, 2014-12…
$ X_ADDR     <dbl> 31595.84, 28679.06, 29654.96, 26782.83, 26201.96, 25358.…
$ Y_ADDR     <dbl> 29220.19, 29782.05, 29974.66, 29933.77, 30005.70, 29991.…
$ SHAPE_Leng <dbl> 5267.381, 3506.107, 1740.926, 3313.625, 2825.594, 4428.9…
$ SHAPE_Area <dbl> 1630379.3, 559816.2, 160807.5, 595428.9, 387429.4, 10303…
$ geometry   <MULTIPOLYGON [m]> MULTIPOLYGON (((31495.56 30..., MULTIPOLYGO…
```

### 3.3 Working with *head()*

use to reveal complete information of a feature object

``` r
head(mpsz, n=5)  
```

Result:

```         

Simple feature collection with 5 features and 15 fields
Geometry type: MULTIPOLYGON
Dimension:     XY
Bounding box:  xmin: 25867.68 ymin: 28369.47 xmax: 32362.39 ymax: 30435.54
Projected CRS: SVY21
  OBJECTID SUBZONE_NO      SUBZONE_N SUBZONE_C CA_IND      PLN_AREA_N
1        1          1   MARINA SOUTH    MSSZ01      Y    MARINA SOUTH
2        2          1   PEARL'S HILL    OTSZ01      Y          OUTRAM
3        3          3      BOAT QUAY    SRSZ03      Y SINGAPORE RIVER
4        4          8 HENDERSON HILL    BMSZ08      N     BUKIT MERAH
5        5          3        REDHILL    BMSZ03      N     BUKIT MERAH
  PLN_AREA_C       REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR
1         MS CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84
2         OT CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05 28679.06
3         SR CENTRAL REGION       CR C35FEFF02B13E0E5 2014-12-05 29654.96
4         BM CENTRAL REGION       CR 3775D82C5DDBEFBD 2014-12-05 26782.83
5         BM CENTRAL REGION       CR 85D9ABEF0A40678F 2014-12-05 26201.96
    Y_ADDR SHAPE_Leng SHAPE_Area                       geometry
1 29220.19   5267.381  1630379.3 MULTIPOLYGON (((31495.56 30...
2 29782.05   3506.107   559816.2 MULTIPOLYGON (((29092.28 30...
3 29974.66   1740.926   160807.5 MULTIPOLYGON (((29932.33 29...
4 29933.77   3313.625   595428.9 MULTIPOLYGON (((27131.28 30...
5 30005.70   2825.594   387429.4 MULTIPOLYGON (((26451.03 30...
```

## 4 Plotting the Geospatial Data

In geospatial data science, by looking at the feature information is not enough. We are also interested to visualise the geospatial features. This is the time you will find plot() of R Graphic comes in very handy as shown in the code chunk below.

``` r
plot(mpsz) 
```

![](https://i-blog.csdnimg.cn/direct/2551665410b9436cb4522ddba4e10982.png)

The default plot of an sf object is a multi-plot of all attributes, up to a reasonable maximum as shown above. We can, however, choose to plot only the geometry by using the code chunk below.

``` r
plot(st_geometry(mpsz))  
```

![sf 对象的默认绘图](https://i-blog.csdnimg.cn/direct/3261b5881fc24034a8c1d63339336eb9.png)

Alternatively, we can also choose the plot the sf object by using a specific attribute as shown in the code chunk below.

``` r
plot(mpsz["PLN_AREA_N"]) 
```

![](https://i-blog.csdnimg.cn/direct/e28460a2d5a8403386ece349ab537f28.png)

## 5 Working with Projection

### 5.1 Assigning EPSG code to a simple feature data frame

One of the common issue that can happen during importing geospatial data into R is that the coordinate system of the source data was either missing (such as due to missing .proj for ESRI shapefile) or wrongly assigned during the importing process.

``` r
 st_crs(mpsz)
```

Result:

```         
Coordinate Reference System:
  User input: SVY21 
  wkt:
PROJCRS["SVY21",
    BASEGEOGCRS["SVY21[WGS84]",
        DATUM["World Geodetic System 1984",
            ELLIPSOID["WGS 84",6378137,298.257223563,
                LENGTHUNIT["metre",1]],
            ID["EPSG",6326]],
        PRIMEM["Greenwich",0,
            ANGLEUNIT["Degree",0.0174532925199433]]],
    CONVERSION["unnamed",
        METHOD["Transverse Mercator",
            ID["EPSG",9807]],
        PARAMETER["Latitude of natural origin",1.36666666666667,
            ANGLEUNIT["Degree",0.0174532925199433],
            ID["EPSG",8801]],
        PARAMETER["Longitude of natural origin",103.833333333333,
            ANGLEUNIT["Degree",0.0174532925199433],
            ID["EPSG",8802]],
        PARAMETER["Scale factor at natural origin",1,
            SCALEUNIT["unity",1],
            ID["EPSG",8805]],
        PARAMETER["False easting",28001.642,
            LENGTHUNIT["metre",1],
            ID["EPSG",8806]],
        PARAMETER["False northing",38744.572,
            LENGTHUNIT["metre",1],
            ID["EPSG",8807]]],
    CS[Cartesian,2],
        AXIS["(E)",east,
            ORDER[1],
            LENGTHUNIT["metre",1,
                ID["EPSG",9001]]],
        AXIS["(N)",north,
            ORDER[2],
            LENGTHUNIT["metre",1,
                ID["EPSG",9001]]]]
```

But when we read until the end of the print, it indicates that the EPSG is 9001. This is a wrong EPSG code because the correct EPSG code for svy21 should be [3414](https://epsg.io/3414).

n order to assign the correct EPSG code to `mpsz` data frame, *st_set_crs()* of **sf** package is used as shown in the code chunk below.

``` r
mpsz3414 <- st_set_crs(mpsz, 3414)
```

```         
st_crs(mpsz3414)
```

Result:

```         
Coordinate Reference System:
  User input: EPSG:3414 
  wkt:
PROJCRS["SVY21 / Singapore TM",
    BASEGEOGCRS["SVY21",
        DATUM["SVY21",
            ELLIPSOID["WGS 84",6378137,298.257223563,
                LENGTHUNIT["metre",1]]],
        PRIMEM["Greenwich",0,
            ANGLEUNIT["degree",0.0174532925199433]],
        ID["EPSG",4757]],
    CONVERSION["Singapore Transverse Mercator",
        METHOD["Transverse Mercator",
            ID["EPSG",9807]],
        PARAMETER["Latitude of natural origin",1.36666666666667,
            ANGLEUNIT["degree",0.0174532925199433],
            ID["EPSG",8801]],
        PARAMETER["Longitude of natural origin",103.833333333333,
            ANGLEUNIT["degree",0.0174532925199433],
            ID["EPSG",8802]],
        PARAMETER["Scale factor at natural origin",1,
            SCALEUNIT["unity",1],
            ID["EPSG",8805]],
        PARAMETER["False easting",28001.642,
            LENGTHUNIT["metre",1],
            ID["EPSG",8806]],
        PARAMETER["False northing",38744.572,
            LENGTHUNIT["metre",1],
            ID["EPSG",8807]]],
    CS[Cartesian,2],
        AXIS["northing (N)",north,
            ORDER[1],
            LENGTHUNIT["metre",1]],
        AXIS["easting (E)",east,
            ORDER[2],
            LENGTHUNIT["metre",1]],
    USAGE[
        SCOPE["Cadastre, engineering survey, topographic mapping."],
        AREA["Singapore - onshore and offshore."],
        BBOX[1.13,103.59,1.47,104.07]],
    ID["EPSG",3414]]
```

**Notice that the EPSG code is 3414 now.**

### 5.2 Transforming the projection of preschool from wgs84 to svy21

``` r
st_geometry(preschool)
```

Result:

```         
Geometry set for 2290 features 
Geometry type: POINT
Dimension:     XYZ
Bounding box:  xmin: 103.6878 ymin: 1.247759 xmax: 103.9897 ymax: 1.462134
z_range:       zmin: 0 zmax: 0
Geodetic CRS:  WGS 84
First 5 geometries:
POINT Z (103.8072 1.299333 0)
POINT Z (103.826 1.312839 0)
POINT Z (103.8409 1.348843 0)
POINT Z (103.8048 1.435024 0)
POINT Z (103.839 1.33315 0)
```

**Let us perform the projection transformation by using the code chunk below.**

``` r
preschool3414 <- st_transform(preschool, 
                               crs = 3414)
```

Next, let us display the content of preschool3414 sf data frame as shown below

``` r
st_geometry(preschool3414)
```

Result:

```         
Geometry set for 2290 features 
Geometry type: POINT
Dimension:     XYZ
Bounding box:  xmin: 11810.03 ymin: 25596.33 xmax: 45404.24 ymax: 49300.88
z_range:       zmin: 0 zmax: 0
Projected CRS: SVY21 / Singapore TM
First 5 geometries:
POINT Z (25089.46 31299.16 0)
POINT Z (27189.07 32792.54 0)
POINT Z (28844.56 36773.76 0)
POINT Z (24821.92 46303.16 0)
POINT Z (28637.82 35038.49 0)
```

## 6 Importing and Converting An Aspatial Data

### 6.1 Importing the aspatial data

we will use **read_csv()** of **readr** package to import `listing.csv` as shown the code chunk below

``` r
listings <- read_csv("data/geospatial/listings.csv")
```

Result:

```         
Rows: 3540 Columns: 18                                                       
── Column specification ─────────────────────────────────────────────────────
Delimiter: ","
chr   (6): name, host_name, neighbourhood_group, neighbourhood, room_type...
dbl  (11): id, host_id, latitude, longitude, price, minimum_nights, numbe...
date  (1): last_review
```

```         
list(listings) 
```

Result:

```         
# A tibble: 3,540 × 18
       id name  host_id host_name neighbourhood_group neighbourhood latitude longitude room_type
    <dbl> <chr>   <dbl> <chr>     <chr>               <chr>            <dbl>     <dbl> <chr>    
 1  71609 Ensu…  367042 Belinda   East Region         Tampines          1.35      104. Private …
 2  71896 B&B …  367042 Belinda   East Region         Tampines          1.35      104. Private …
 3  71903 Room…  367042 Belinda   East Region         Tampines          1.35      104. Private …
 4 275343 10mi… 1439258 Kay       Central Region      Bukit Merah       1.29      104. Private …
 5 275344 15 m… 1439258 Kay       Central Region      Bukit Merah       1.29      104. Private …
 6 289234 Book…  367042 Belinda   East Region         Tampines          1.34      104. Private …
 7 294281 5 mi… 1521514 Elizabeth Central Region      Newton            1.31      104. Private …
 8 324945 Comf… 1439258 Kay       Central Region      Bukit Merah       1.29      104. Private …
 9 330095 Rela… 1439258 Kay       Central Region      Bukit Merah       1.29      104. Private …
10 344803 Budg…  367042 Belinda   East Region         Tampines          1.35      104. Private …
# ℹ 3,530 more rows
# ℹ 9 more variables: price <dbl>, minimum_nights <dbl>, number_of_reviews <dbl>,
#   last_review <date>, reviews_per_month <dbl>, calculated_host_listings_count <dbl>,
#   availability_365 <dbl>, number_of_reviews_ltm <dbl>, license <chr>
# ℹ Use `print(n = ...)` to see more rows
```

### 6.2 Creating a simple feature data frame from an aspatial data frame

```         
 listings_sf <- st_as_sf(listings, 
+                         coords = c("longitude", "latitude"),
+                         crs=4326) %>%
+     st_transform(crs = 3414)
> glimpse(listings_sf)

 glimpse(listings_sf)
```

Result:

```         
Rows: 3,540
Columns: 17
$ id                             <dbl> 71609, 71896, 71903, 275343, 275344,…
$ name                           <chr> "Ensuite Room (Room 1 & 2) near EXPO…
$ host_id                        <dbl> 367042, 367042, 367042, 1439258, 143…
$ host_name                      <chr> "Belinda", "Belinda", "Belinda", "Ka…
$ neighbourhood_group            <chr> "East Region", "East Region", "East …
$ neighbourhood                  <chr> "Tampines", "Tampines", "Tampines", …
$ room_type                      <chr> "Private room", "Private room", "Pri…
$ price                          <dbl> NA, 80, 80, 50, 50, NA, 85, 65, 45, …
$ minimum_nights                 <dbl> 92, 92, 92, 180, 180, 92, 92, 180, 1…
$ number_of_reviews              <dbl> 19, 24, 46, 20, 16, 12, 131, 17, 5, …
$ last_review                    <date> 2020-01-17, 2019-10-13, 2020-01-09,…
$ reviews_per_month              <dbl> 0.12, 0.15, 0.29, 0.15, 0.11, 0.08, …
$ calculated_host_listings_count <dbl> 6, 6, 6, 49, 49, 6, 7, 49, 49, 6, 7,…
$ availability_365               <dbl> 89, 148, 90, 62, 0, 88, 365, 0, 0, 3…
$ number_of_reviews_ltm          <dbl> 0, 0, 0, 0, 2, 0, 0, 1, 1, 1, 0, 0, …
$ license                        <chr> NA, NA, NA, "S0399", "S0399", NA, NA…
$ geometry                       <POINT [m]> POINT (41972.5 36390.05), POIN…
```

## 7 Geoprocessing with sf package

Besides providing functions to handling (i.e. importing, exporting, assigning projection, transforming projection etc) geospatial data, **sf** package also offers a wide range of geoprocessing (also known as GIS analysis) functions.

In this section, I perform two commonly used geoprocessing functions, namely [buffering](https://www.gislounge.com/buffers-in-gis/) and point in polygon count.

### 7.1 Buffering

The scenario:

The authority is planning to upgrade the exiting cycling path. To do so, they need to acquire 5 metres of reserved land on the both sides of the current cycling path. You are tasked to determine the extend of the land need to be acquired and their total area.

The solution:

Firstly, [*st_buffer()*](https://r-spatial.github.io/sf/reference/geos_unary.html) of **sf** package is used to compute the 5-meter buffers around cycling paths

``` r
buffer_cycling <- st_buffer(cyclingpath, 
                               dist=5, nQuadSegs = 30)
```

This is followed by calculating the area of the buffers as shown in the code chunk below.

``` r
buffer_cycling$AREA <- st_area(buffer_cycling)
```

Lastly, sum() of Base R will be used to derive the total land involved

```         
sum(buffer_cycling$AREA)
```

2218855 \[m\^2\]

### 7.2 Point-in-polygon count

The scenario:

A pre-school service group want to find out the numbers of pre-schools in each Planning Subzone.

The solution:

The code chunk below performs two operations at one go. Firstly, identify pre-schools located inside each Planning Subzone by using [st_intersects()](https://r-spatial.github.io/sf/reference/geos_binary_pred.html). Next, [*length()*](https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/length) of Base R is used to calculate numbers of pre-schools that fall inside each planning subzone.

``` r
mpsz3414$`PreSch Count`<- lengths(st_intersects(mpsz3414, preschool3414))
```

You can check the summary statistics of the newly derived *PreSch Count* field by using *summary()* as shown in the code chunk below.

``` r
summary(mpsz3414$`PreSch Count`)
```

Min. 1st Qu. Median Mean 3rd Qu. Max. 0.00 0.00 4.00 7.09 10.00 72.00

To list the planning subzone with the most number of pre-school, the top_n() of **dplyr** package is used as shown in the code chunk below.

``` r
top_n(mpsz3414, 1, `PreSch Count`)
```

Result:

```         
Rows: 3,540
Columns: 17
$ id                             <dbl> 71609, 71896, 71903, 275343, 275344,…
$ name                           <chr> "Ensuite Room (Room 1 & 2) near EXPO…
$ host_id                        <dbl> 367042, 367042, 367042, 1439258, 143…
$ host_name                      <chr> "Belinda", "Belinda", "Belinda", "Ka…
$ neighbourhood_group            <chr> "East Region", "East Region", "East …
$ neighbourhood                  <chr> "Tampines", "Tampines", "Tampines", …
$ room_type                      <chr> "Private room", "Private room", "Pri…
$ price                          <dbl> NA, 80, 80, 50, 50, NA, 85, 65, 45, …
$ minimum_nights                 <dbl> 92, 92, 92, 180, 180, 92, 92, 180, 1…
$ number_of_reviews              <dbl> 19, 24, 46, 20, 16, 12, 131, 17, 5, …
$ last_review                    <date> 2020-01-17, 2019-10-13, 2020-01-09,…
$ reviews_per_month              <dbl> 0.12, 0.15, 0.29, 0.15, 0.11, 0.08, …
$ calculated_host_listings_count <dbl> 6, 6, 6, 49, 49, 6, 7, 49, 49, 6, 7,…
$ availability_365               <dbl> 89, 148, 90, 62, 0, 88, 365, 0, 0, 3…
$ number_of_reviews_ltm          <dbl> 0, 0, 0, 0, 2, 0, 0, 1, 1, 1, 0, 0, …
$ license                        <chr> NA, NA, NA, "S0399", "S0399", NA, NA…
$ geometry                       <POINT [m]> POINT (41972.5 36390.05), POIN…
```

**calculate the density of pre-school by planning subzone**

uses **st_area()** of sf package to derive the area of each planning subzone

``` r
mpsz3414$Area <- mpsz3414 %>% st_area()
```

Next, mutate() of dplyr package is used to compute the density by using the code chunk below.

``` r
mpsz3414 <- mpsz3414 %>%
  mutate(`PreSch Density` = `PreSch Count`/Area * 1000000)
```

## 8 Exploratory Data Analysis

### 8.1 EDA Histogram

``` r
hist(mpsz3414$`PreSch Density`)
```

![](https://i-blog.csdnimg.cn/direct/72319dc6f0c341e6a0de1318a9f70ef9.png)

### 8.2 **ggplot2**

``` r
ggplot(data=mpsz3414, 
       aes(x= as.numeric(`PreSch Density`)))+
  geom_histogram(bins=20, 
                 color="black", 
                 fill="light blue") +
  labs(title = "Are pre-school even distributed in Singapore?",
       subtitle= "There are many planning sub-zones with a single pre-school, on the other hand, \nthere are two planning sub-zones with at least 20 pre-schools",
       x = "Pre-school density (per km sq)",
       y = "Frequency")
```

![](https://i-blog.csdnimg.cn/direct/2855592b8e9347c8afed653b3c86920c.png)

**result:**

![](https://i-blog.csdnimg.cn/direct/f6b594c384fa48aaac34c41f1b545711.png)

# n Exercise 1: Geospatial Data Science with R

## 1.0 overview

Geospatial Data Science is a process of importing, wrangling, integrating, and processing geographically referenced data sets. In this hands-on exercise, you will learn how to perform geospatial data science tasks in R by using **sf** package.

## 2.0 setting

### 2.1 Data Acquisition

Data are key to data analytics including geospatial analytics. Hence, before analysing, I extract the necessary data sets from the following sources:

-   Master Plan 2014 Subzone Boundary (Web) from \[ [data.gov.sg](https://data.gov.sg/)\]
-   Pre-Schools Location from \[[data.gov.sg](https://data.gov.sg/)\]
-   Cycling Path from \[[LTADataMall](https://www.mytransport.sg/content/mytransport/home/dataMall.html)\]
-   Latest version of Singapore Airbnb listing data from \[ [Inside Airbnb](http://insideairbnb.com/get-the-data.html)\]

### 2.2 Installing R-Packages

-   **sf** for importing, managing, and processing geospatial data, and
-   **tidyverse** for performing data science tasks such as importing, wrangling and visualising data.

### 2.3 Importing DATA and PACKAGES

install the required packages using the code chunk below

​pacman::p_load(sf, tidyverse)

Import Shapefiles

using `st_read()`to open shapefiles

-   

    ###### when the input geospatial data is in shapefile format, two arguments will be used

-   no extension

### Importing polygon feature data in shapefile format

``` r
 mpsz = st_read(dsn = "data/geospatial/MasterPlan2014SubzoneBoundaryWebSHP", layer = "MP14_SUBZONE_WEB_PL")
```

```         
Reading layer `MP14_SUBZONE_WEB_PL' from data source 
  `D:\IS415-Geospatial-Analytics-and-Applications-Blog\Hands-on_Ex01\data\geospatial\MasterPlan2014SubzoneBoundaryWebSHP' 
  using driver `ESRI Shapefile'
Simple feature collection with 323 features and 15 fields
Geometry type: MULTIPOLYGON
Dimension:     XY
Bounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33
Projected CRS: SVY21
```

### Importing polyline feature data in shapefile form

``` r
cyclingpath = st_read(dsn = "data/geospatial/CyclingPath_Jul2024", layer = "CyclingPathGazette")
```

Result:

```         
Reading layer `CyclingPathGazette' from data source 
`D:\IS415-Geospatial-Analytics-and-Applications-Blog\Hands-on_Ex01\data\geospatial\CyclingPath_Jul2024' 
  using driver `ESRI Shapefile'
Simple feature collection with 3138 features and 2 fields
Geometry type: MULTILINESTRING
Dimension:     XY
Bounding box:  xmin: 11854.32 ymin: 28347.98 xmax: 42644.17 ymax: 48948.15
Projected CRS: SVY21
```

### Importing GIS data in kml format

``` r
preschool = st_read("data/geospatial/PreSchoolsLocation.kml")
```

Result:

```         
Reading layer `PRESCHOOLS_LOCATION' from data source 
  `D:\IS415-Geospatial-Analytics-and-Applications-Blog\Hands-on_Ex01\data\geospatial\PreSchoolsLocation.kml' 
  using driver `KML'
Simple feature collection with 2290 features and 2 fields
Geometry type: POINT
Dimension:     XYZ
Bounding box:  xmin: 103.6878 ymin: 1.247759 xmax: 103.9897 ymax: 1.462134
z_range:       zmin: 0 zmax: 0
Geodetic CRS:  WGS 84
```

## 3.0 Checking the Content of A Simple Feature Data Frame

### 3.1 Working with *st_geometry()*

print only displays basic information of the feature class

``` r
st_geometry(mpsz)
```

Result:

```         
Geometry set for 323 features 
Geometry type: MULTIPOLYGON
Dimension:     XY
Bounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33
Projected CRS: SVY21
First 5 geometries:
MULTIPOLYGON (((31495.56 30140.01, 31980.96 296...
MULTIPOLYGON (((29092.28 30021.89, 29119.64 300...
MULTIPOLYGON (((29932.33 29879.12, 29947.32 298...
MULTIPOLYGON (((27131.28 30059.73, 27088.33 297...
MULTIPOLYGON (((26451.03 30396.46, 26440.47 303...
```

### 3.2 Working with glimpse()

*glimpse()* report more about the associated attribute information in the data frame.

``` r
glimpse(mpsz)
```

Result:

```         
Rows: 323
Columns: 16
$ OBJECTID   <int> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 1…
$ SUBZONE_NO <int> 1, 1, 3, 8, 3, 7, 9, 2, 13, 7, 12, 6, 1, 5, 1, 1, 3, 2, …
$ SUBZONE_N  <chr> "MARINA SOUTH", "PEARL'S HILL", "BOAT QUAY", "HENDERSON …
$ SUBZONE_C  <chr> "MSSZ01", "OTSZ01", "SRSZ03", "BMSZ08", "BMSZ03", "BMSZ0…
$ CA_IND     <chr> "Y", "Y", "Y", "N", "N", "N", "N", "Y", "N", "N", "N", "…
$ PLN_AREA_N <chr> "MARINA SOUTH", "OUTRAM", "SINGAPORE RIVER", "BUKIT MERA…
$ PLN_AREA_C <chr> "MS", "OT", "SR", "BM", "BM", "BM", "BM", "SR", "QT", "Q…
$ REGION_N   <chr> "CENTRAL REGION", "CENTRAL REGION", "CENTRAL REGION", "C…
$ REGION_C   <chr> "CR", "CR", "CR", "CR", "CR", "CR", "CR", "CR", "CR", "C…
$ INC_CRC    <chr> "5ED7EB253F99252E", "8C7149B9EB32EEFC", "C35FEFF02B13E0E…
$ FMEL_UPD_D <date> 2014-12-05, 2014-12-05, 2014-12-05, 2014-12-05, 2014-12…
$ X_ADDR     <dbl> 31595.84, 28679.06, 29654.96, 26782.83, 26201.96, 25358.…
$ Y_ADDR     <dbl> 29220.19, 29782.05, 29974.66, 29933.77, 30005.70, 29991.…
$ SHAPE_Leng <dbl> 5267.381, 3506.107, 1740.926, 3313.625, 2825.594, 4428.9…
$ SHAPE_Area <dbl> 1630379.3, 559816.2, 160807.5, 595428.9, 387429.4, 10303…
$ geometry   <MULTIPOLYGON [m]> MULTIPOLYGON (((31495.56 30..., MULTIPOLYGO…
```

### 3.3 Working with *head()*

use to reveal complete information of a feature object

``` r
head(mpsz, n=5)  
```

Result:

```         

Simple feature collection with 5 features and 15 fields
Geometry type: MULTIPOLYGON
Dimension:     XY
Bounding box:  xmin: 25867.68 ymin: 28369.47 xmax: 32362.39 ymax: 30435.54
Projected CRS: SVY21
  OBJECTID SUBZONE_NO      SUBZONE_N SUBZONE_C CA_IND      PLN_AREA_N
1        1          1   MARINA SOUTH    MSSZ01      Y    MARINA SOUTH
2        2          1   PEARL'S HILL    OTSZ01      Y          OUTRAM
3        3          3      BOAT QUAY    SRSZ03      Y SINGAPORE RIVER
4        4          8 HENDERSON HILL    BMSZ08      N     BUKIT MERAH
5        5          3        REDHILL    BMSZ03      N     BUKIT MERAH
  PLN_AREA_C       REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR
1         MS CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84
2         OT CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05 28679.06
3         SR CENTRAL REGION       CR C35FEFF02B13E0E5 2014-12-05 29654.96
4         BM CENTRAL REGION       CR 3775D82C5DDBEFBD 2014-12-05 26782.83
5         BM CENTRAL REGION       CR 85D9ABEF0A40678F 2014-12-05 26201.96
    Y_ADDR SHAPE_Leng SHAPE_Area                       geometry
1 29220.19   5267.381  1630379.3 MULTIPOLYGON (((31495.56 30...
2 29782.05   3506.107   559816.2 MULTIPOLYGON (((29092.28 30...
3 29974.66   1740.926   160807.5 MULTIPOLYGON (((29932.33 29...
4 29933.77   3313.625   595428.9 MULTIPOLYGON (((27131.28 30...
5 30005.70   2825.594   387429.4 MULTIPOLYGON (((26451.03 30...
```

## 4 Plotting the Geospatial Data

In geospatial data science, by looking at the feature information is not enough. We are also interested to visualise the geospatial features. This is the time you will find plot() of R Graphic comes in very handy as shown in the code chunk below.

``` r
plot(mpsz) 
```

![](https://i-blog.csdnimg.cn/direct/2551665410b9436cb4522ddba4e10982.png)

The default plot of an sf object is a multi-plot of all attributes, up to a reasonable maximum as shown above. We can, however, choose to plot only the geometry by using the code chunk below.

``` r
plot(st_geometry(mpsz))  
```

![sf 对象的默认绘图](https://i-blog.csdnimg.cn/direct/3261b5881fc24034a8c1d63339336eb9.png)

Alternatively, we can also choose the plot the sf object by using a specific attribute as shown in the code chunk below.

``` r
plot(mpsz["PLN_AREA_N"]) 
```

![](https://i-blog.csdnimg.cn/direct/e28460a2d5a8403386ece349ab537f28.png)

## 5 Working with Projection

### 5.1 Assigning EPSG code to a simple feature data frame

One of the common issue that can happen during importing geospatial data into R is that the coordinate system of the source data was either missing (such as due to missing .proj for ESRI shapefile) or wrongly assigned during the importing process.

``` r
 st_crs(mpsz)
```

Result:

```         
Coordinate Reference System:
  User input: SVY21 
  wkt:
PROJCRS["SVY21",
    BASEGEOGCRS["SVY21[WGS84]",
        DATUM["World Geodetic System 1984",
            ELLIPSOID["WGS 84",6378137,298.257223563,
                LENGTHUNIT["metre",1]],
            ID["EPSG",6326]],
        PRIMEM["Greenwich",0,
            ANGLEUNIT["Degree",0.0174532925199433]]],
    CONVERSION["unnamed",
        METHOD["Transverse Mercator",
            ID["EPSG",9807]],
        PARAMETER["Latitude of natural origin",1.36666666666667,
            ANGLEUNIT["Degree",0.0174532925199433],
            ID["EPSG",8801]],
        PARAMETER["Longitude of natural origin",103.833333333333,
            ANGLEUNIT["Degree",0.0174532925199433],
            ID["EPSG",8802]],
        PARAMETER["Scale factor at natural origin",1,
            SCALEUNIT["unity",1],
            ID["EPSG",8805]],
        PARAMETER["False easting",28001.642,
            LENGTHUNIT["metre",1],
            ID["EPSG",8806]],
        PARAMETER["False northing",38744.572,
            LENGTHUNIT["metre",1],
            ID["EPSG",8807]]],
    CS[Cartesian,2],
        AXIS["(E)",east,
            ORDER[1],
            LENGTHUNIT["metre",1,
                ID["EPSG",9001]]],
        AXIS["(N)",north,
            ORDER[2],
            LENGTHUNIT["metre",1,
                ID["EPSG",9001]]]]
```

But when we read until the end of the print, it indicates that the EPSG is 9001. This is a wrong EPSG code because the correct EPSG code for svy21 should be [3414](https://epsg.io/3414).

n order to assign the correct EPSG code to `mpsz` data frame, *st_set_crs()* of **sf** package is used as shown in the code chunk below.

``` r
mpsz3414 <- st_set_crs(mpsz, 3414)
```

```         
st_crs(mpsz3414)
```

Result:

```         
Coordinate Reference System:
  User input: EPSG:3414 
  wkt:
PROJCRS["SVY21 / Singapore TM",
    BASEGEOGCRS["SVY21",
        DATUM["SVY21",
            ELLIPSOID["WGS 84",6378137,298.257223563,
                LENGTHUNIT["metre",1]]],
        PRIMEM["Greenwich",0,
            ANGLEUNIT["degree",0.0174532925199433]],
        ID["EPSG",4757]],
    CONVERSION["Singapore Transverse Mercator",
        METHOD["Transverse Mercator",
            ID["EPSG",9807]],
        PARAMETER["Latitude of natural origin",1.36666666666667,
            ANGLEUNIT["degree",0.0174532925199433],
            ID["EPSG",8801]],
        PARAMETER["Longitude of natural origin",103.833333333333,
            ANGLEUNIT["degree",0.0174532925199433],
            ID["EPSG",8802]],
        PARAMETER["Scale factor at natural origin",1,
            SCALEUNIT["unity",1],
            ID["EPSG",8805]],
        PARAMETER["False easting",28001.642,
            LENGTHUNIT["metre",1],
            ID["EPSG",8806]],
        PARAMETER["False northing",38744.572,
            LENGTHUNIT["metre",1],
            ID["EPSG",8807]]],
    CS[Cartesian,2],
        AXIS["northing (N)",north,
            ORDER[1],
            LENGTHUNIT["metre",1]],
        AXIS["easting (E)",east,
            ORDER[2],
            LENGTHUNIT["metre",1]],
    USAGE[
        SCOPE["Cadastre, engineering survey, topographic mapping."],
        AREA["Singapore - onshore and offshore."],
        BBOX[1.13,103.59,1.47,104.07]],
    ID["EPSG",3414]]
```

**Notice that the EPSG code is 3414 now.**

### 5.2 Transforming the projection of preschool from wgs84 to svy21

``` r
st_geometry(preschool)
```

Result:

```         
Geometry set for 2290 features 
Geometry type: POINT
Dimension:     XYZ
Bounding box:  xmin: 103.6878 ymin: 1.247759 xmax: 103.9897 ymax: 1.462134
z_range:       zmin: 0 zmax: 0
Geodetic CRS:  WGS 84
First 5 geometries:
POINT Z (103.8072 1.299333 0)
POINT Z (103.826 1.312839 0)
POINT Z (103.8409 1.348843 0)
POINT Z (103.8048 1.435024 0)
POINT Z (103.839 1.33315 0)
```

**Let us perform the projection transformation by using the code chunk below.**

``` r
preschool3414 <- st_transform(preschool, 
                               crs = 3414)
```

Next, let us display the content of preschool3414 sf data frame as shown below

``` r
st_geometry(preschool3414)
```

Result:

```         
Geometry set for 2290 features 
Geometry type: POINT
Dimension:     XYZ
Bounding box:  xmin: 11810.03 ymin: 25596.33 xmax: 45404.24 ymax: 49300.88
z_range:       zmin: 0 zmax: 0
Projected CRS: SVY21 / Singapore TM
First 5 geometries:
POINT Z (25089.46 31299.16 0)
POINT Z (27189.07 32792.54 0)
POINT Z (28844.56 36773.76 0)
POINT Z (24821.92 46303.16 0)
POINT Z (28637.82 35038.49 0)
```

## 6 Importing and Converting An Aspatial Data

### 6.1 Importing the aspatial data

we will use **read_csv()** of **readr** package to import `listing.csv` as shown the code chunk below

``` r
listings <- read_csv("data/geospatial/listings.csv")
```

Result:

```         
Rows: 3540 Columns: 18                                                       
── Column specification ─────────────────────────────────────────────────────
Delimiter: ","
chr   (6): name, host_name, neighbourhood_group, neighbourhood, room_type...
dbl  (11): id, host_id, latitude, longitude, price, minimum_nights, numbe...
date  (1): last_review
```

```         
list(listings) 
```

Result:

```         
# A tibble: 3,540 × 18
       id name  host_id host_name neighbourhood_group neighbourhood latitude longitude room_type
    <dbl> <chr>   <dbl> <chr>     <chr>               <chr>            <dbl>     <dbl> <chr>    
 1  71609 Ensu…  367042 Belinda   East Region         Tampines          1.35      104. Private …
 2  71896 B&B …  367042 Belinda   East Region         Tampines          1.35      104. Private …
 3  71903 Room…  367042 Belinda   East Region         Tampines          1.35      104. Private …
 4 275343 10mi… 1439258 Kay       Central Region      Bukit Merah       1.29      104. Private …
 5 275344 15 m… 1439258 Kay       Central Region      Bukit Merah       1.29      104. Private …
 6 289234 Book…  367042 Belinda   East Region         Tampines          1.34      104. Private …
 7 294281 5 mi… 1521514 Elizabeth Central Region      Newton            1.31      104. Private …
 8 324945 Comf… 1439258 Kay       Central Region      Bukit Merah       1.29      104. Private …
 9 330095 Rela… 1439258 Kay       Central Region      Bukit Merah       1.29      104. Private …
10 344803 Budg…  367042 Belinda   East Region         Tampines          1.35      104. Private …
# ℹ 3,530 more rows
# ℹ 9 more variables: price <dbl>, minimum_nights <dbl>, number_of_reviews <dbl>,
#   last_review <date>, reviews_per_month <dbl>, calculated_host_listings_count <dbl>,
#   availability_365 <dbl>, number_of_reviews_ltm <dbl>, license <chr>
# ℹ Use `print(n = ...)` to see more rows
```

### 6.2 Creating a simple feature data frame from an aspatial data frame

```         
 listings_sf <- st_as_sf(listings, 
+                         coords = c("longitude", "latitude"),
+                         crs=4326) %>%
+     st_transform(crs = 3414)
> glimpse(listings_sf)

 glimpse(listings_sf)
```

Result:

```         
Rows: 3,540
Columns: 17
$ id                             <dbl> 71609, 71896, 71903, 275343, 275344,…
$ name                           <chr> "Ensuite Room (Room 1 & 2) near EXPO…
$ host_id                        <dbl> 367042, 367042, 367042, 1439258, 143…
$ host_name                      <chr> "Belinda", "Belinda", "Belinda", "Ka…
$ neighbourhood_group            <chr> "East Region", "East Region", "East …
$ neighbourhood                  <chr> "Tampines", "Tampines", "Tampines", …
$ room_type                      <chr> "Private room", "Private room", "Pri…
$ price                          <dbl> NA, 80, 80, 50, 50, NA, 85, 65, 45, …
$ minimum_nights                 <dbl> 92, 92, 92, 180, 180, 92, 92, 180, 1…
$ number_of_reviews              <dbl> 19, 24, 46, 20, 16, 12, 131, 17, 5, …
$ last_review                    <date> 2020-01-17, 2019-10-13, 2020-01-09,…
$ reviews_per_month              <dbl> 0.12, 0.15, 0.29, 0.15, 0.11, 0.08, …
$ calculated_host_listings_count <dbl> 6, 6, 6, 49, 49, 6, 7, 49, 49, 6, 7,…
$ availability_365               <dbl> 89, 148, 90, 62, 0, 88, 365, 0, 0, 3…
$ number_of_reviews_ltm          <dbl> 0, 0, 0, 0, 2, 0, 0, 1, 1, 1, 0, 0, …
$ license                        <chr> NA, NA, NA, "S0399", "S0399", NA, NA…
$ geometry                       <POINT [m]> POINT (41972.5 36390.05), POIN…
```

## 7 Geoprocessing with sf package

Besides providing functions to handling (i.e. importing, exporting, assigning projection, transforming projection etc) geospatial data, **sf** package also offers a wide range of geoprocessing (also known as GIS analysis) functions.

In this section, I perform two commonly used geoprocessing functions, namely [buffering](https://www.gislounge.com/buffers-in-gis/) and point in polygon count.

### 7.1 Buffering

The scenario:

The authority is planning to upgrade the exiting cycling path. To do so, they need to acquire 5 metres of reserved land on the both sides of the current cycling path. You are tasked to determine the extend of the land need to be acquired and their total area.

The solution:

Firstly, [*st_buffer()*](https://r-spatial.github.io/sf/reference/geos_unary.html) of **sf** package is used to compute the 5-meter buffers around cycling paths

``` r
buffer_cycling <- st_buffer(cyclingpath, 
                               dist=5, nQuadSegs = 30)
```

This is followed by calculating the area of the buffers as shown in the code chunk below.

``` r
buffer_cycling$AREA <- st_area(buffer_cycling)
```

Lastly, sum() of Base R will be used to derive the total land involved

```         
sum(buffer_cycling$AREA)
```

2218855 \[m\^2\]

### 7.2 Point-in-polygon count

The scenario:

A pre-school service group want to find out the numbers of pre-schools in each Planning Subzone.

The solution:

The code chunk below performs two operations at one go. Firstly, identify pre-schools located inside each Planning Subzone by using [st_intersects()](https://r-spatial.github.io/sf/reference/geos_binary_pred.html). Next, [*length()*](https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/length) of Base R is used to calculate numbers of pre-schools that fall inside each planning subzone.

``` r
mpsz3414$`PreSch Count`<- lengths(st_intersects(mpsz3414, preschool3414))
```

You can check the summary statistics of the newly derived *PreSch Count* field by using *summary()* as shown in the code chunk below.

``` r
summary(mpsz3414$`PreSch Count`)
```

Min. 1st Qu. Median Mean 3rd Qu. Max. 0.00 0.00 4.00 7.09 10.00 72.00

To list the planning subzone with the most number of pre-school, the top_n() of **dplyr** package is used as shown in the code chunk below.

``` r
top_n(mpsz3414, 1, `PreSch Count`)
```

Result:

```         
Rows: 3,540
Columns: 17
$ id                             <dbl> 71609, 71896, 71903, 275343, 275344,…
$ name                           <chr> "Ensuite Room (Room 1 & 2) near EXPO…
$ host_id                        <dbl> 367042, 367042, 367042, 1439258, 143…
$ host_name                      <chr> "Belinda", "Belinda", "Belinda", "Ka…
$ neighbourhood_group            <chr> "East Region", "East Region", "East …
$ neighbourhood                  <chr> "Tampines", "Tampines", "Tampines", …
$ room_type                      <chr> "Private room", "Private room", "Pri…
$ price                          <dbl> NA, 80, 80, 50, 50, NA, 85, 65, 45, …
$ minimum_nights                 <dbl> 92, 92, 92, 180, 180, 92, 92, 180, 1…
$ number_of_reviews              <dbl> 19, 24, 46, 20, 16, 12, 131, 17, 5, …
$ last_review                    <date> 2020-01-17, 2019-10-13, 2020-01-09,…
$ reviews_per_month              <dbl> 0.12, 0.15, 0.29, 0.15, 0.11, 0.08, …
$ calculated_host_listings_count <dbl> 6, 6, 6, 49, 49, 6, 7, 49, 49, 6, 7,…
$ availability_365               <dbl> 89, 148, 90, 62, 0, 88, 365, 0, 0, 3…
$ number_of_reviews_ltm          <dbl> 0, 0, 0, 0, 2, 0, 0, 1, 1, 1, 0, 0, …
$ license                        <chr> NA, NA, NA, "S0399", "S0399", NA, NA…
$ geometry                       <POINT [m]> POINT (41972.5 36390.05), POIN…
```

**calculate the density of pre-school by planning subzone**

uses **st_area()** of sf package to derive the area of each planning subzone

``` r
mpsz3414$Area <- mpsz3414 %>% st_area()
```

Next, mutate() of dplyr package is used to compute the density by using the code chunk below.

``` r
mpsz3414 <- mpsz3414 %>%
  mutate(`PreSch Density` = `PreSch Count`/Area * 1000000)
```

## 8 Exploratory Data Analysis

### 8.1 EDA Histogram

``` r
hist(mpsz3414$`PreSch Density`)
```

![](https://i-blog.csdnimg.cn/direct/72319dc6f0c341e6a0de1318a9f70ef9.png)

### 8.2 **ggplot2**

``` r
ggplot(data=mpsz3414, 
       aes(x= as.numeric(`PreSch Density`)))+
  geom_histogram(bins=20, 
                 color="black", 
                 fill="light blue") +
  labs(title = "Are pre-school even distributed in Singapore?",
       subtitle= "There are many planning sub-zones with a single pre-school, on the other hand, \nthere are two planning sub-zones with at least 20 pre-schools",
       x = "Pre-school density (per km sq)",
       y = "Frequency")
```

![](https://i-blog.csdnimg.cn/direct/2855592b8e9347c8afed653b3c86920c.png)

**result:**

![](https://i-blog.csdnimg.cn/direct/f6b594c384fa48aaac34c41f1b545711.png)
